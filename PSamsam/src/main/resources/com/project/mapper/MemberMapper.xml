<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
	 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- namespace="com.spring.mapper.MemberMapper는 MemberMapper인퍼페이스(MemberMapper.class)의 이름을 사용한다. -->
<mapper namespace="com.project.mapper.MemberMapper">

<!-- id는 Mapper.java(여기선 MemberMapper.java)에 동일하게 사용해야된다 -->
<!-- 
일반회원
email / pw/ name/nick/phone/local/img/grade

사업자 
biz_email / biz_no / biz_com/ biz_name / biz_add / biz_img / free_coupon/ pay_coupon / status
 -->
 
 <!-- JJ -->
 	<select id="userCheck" parameterType="MemberVO" resultType="int">
	SELECT count(*) FROM member_list WHERE EMAIL = #{email} AND PW = #{pw} AND STATUS = 1
	</select>
	
	<update id="updateAuthkey" parameterType="HashMap">
		update member_list set authkey =#{authkey} where email=#{email}
	</update>
	
	<update id="updateAuthStatus" parameterType="HashMap">
	update member_list set status ='1' where email=#{email} and authkey=#{authkey,jdbcType=VARCHAR}
	</update>
<!-- join email check -->
<select id="idCheck" parameterType="String" resultType="int">
	SELECT count(*) FROM member_list WHERE email=#{check, jdbcType=VARCHAR}
	</select>
<!-- join nick check -->
<select id="nickCheck" parameterType="String" resultType="int">
	SELECT count(*) FROM member_list WHERE nick=#{check, jdbcType=VARCHAR}
	</select>
		
<!-- 회원가입 -->
<insert id = "joinMember" parameterType="MemberVO">
	insert into member_list (email, pw, name, nick,phone,local, grade, authkey,status, signdate)
	values (#{email}, #{pw}, #{name},#{nick}, #{phone}, #{local}, #{grade}, #{authkey},#{status},sysdate)
</insert>

<!-- 소셜 회원가입 -->
<insert id = "k_joinMember" parameterType="MemberVO">
	insert into member_list(email, pw, name,nick,phone, grade,local, authkey, status, signdate)
	values (#{email}, #{pw}, #{name}, #{nick}, #{phone}, #{grade}, #{local}, #{authkey},#{status}, sysdate)
</insert>

<!-- 회원정보조회 -->
<select id="selectMember" parameterType="String" resultType="MemberVO">
	select * from member_list where email = #{email}
</select>

<select id="getMemberlist" resultType="MemberVO">
	select * from member_list order by email
</select>

<!-- 회원정보수정 -->
<update id = "updateMember" parameterType="MemberVO">
	update member_list set pw=#{pw},nick=#{nick},phone=#{phone},local=#{local} where email= #{email}
</update>

<update id = "updateBiz_Member" parameterType="Biz_memberVO">
	update member_list set pw=#{pw},nick=#{nick},phone=#{phone},local=#{local} where biz_email= #{biz_email}
</update>

<!-- 패스워드변경 -->
<update id = "pwUpdate_M" parameterType="MemberVO">
	update member_list set pw=#{pw} where email= #{email}
</update>

<update id = "pwUpdate_BM" parameterType="Biz_memberVO">
	update member_list set pw=#{pw} where biz_email= #{biz_email}
</update>

<!-- 판매허가인증 확인 -->
<select id ="check_auth" parameterType="Biz_memberVO" resultType="Biz_memberVO">
 	select biz_name from fulldata_animal where auth_no=#{biz_no} and status_no = 01
</select>

<!-- 사업자회원 추가(상태대기) -->
<insert id ="pre_insertBiz" parameterType="Biz_memberVO">
 	insert into biz_member(biz_email, biz_no, biz_com, biz_name, biz_add, biz_img)
 	values(#{biz_email},#{biz_no}, #{biz_com}, #{biz_name}, #{biz_add}, #{biz_img})
</insert>

<update id ="pre_updateBiz" parameterType="String">
	update member_list set grade = '대기' where email = #{email}
</update>

<!-- 사업자회원 조회(이메일) -->
<select id="selectBizMember" parameterType="String" resultType="Biz_memberVO">
	select * from biz_member where biz_email = #{biz_email}
</select>

<!-- 사업자회원 등록확인(관리번호) -->
<select id="selectBiz_no" parameterType="String" resultType="int">
	select count(*) from biz_member where biz_no = #{biz_no}
</select>

<!-- 사업자회원 내가 작성한 분양글 -->
<select id="getMyAdopt" parameterType="String" resultType="Adopt_BoardVO">
	select adopt_no, adopt_title, adopt_date, adopt_readcount from adopt_list where adopt_email = #{adopt_email} order by adopt_no desc
</select>

<!-- 사업자회원 내가 작성한 글에 달린 댓글수 -->
<select id="getMyAdoptReply" parameterType="int" resultType="int">
	select count(*) from adopt_reply where adopt_no = #{adopt_no}
</select>

<!-- 내 작성글 리스트 -->
<select id="getWriteList" parameterType="String" resultType="BoardlistVO">
	select adopt_no as num, adopt_title as subject, adopt_date as write_date from adopt_list where adopt_email = #{email}
	union all
	select fdoc_no as num, fdoc_subject as subject, fdoc_date as write_date from free_doc where fdoc_email = #{email}
</select>

<!-- 내 댓글 리스트 -->
<select id="getWriteComment" parameterType="String" resultType="CommentListVO">
	select adopt_ccontent as content, adopt_cdate as write_date from adopt_reply where adopt_cemail = #{email}
	union all
	select fdoc_ccontent as content, fdoc_cdate as write_date from fdoc_reply where fdoc_cemail = #{email}
</select>

<!-- 이용권 결제내역 추가 -->
<insert id ="insert_pay" parameterType="Payed_listVO">
 	insert into payed_list
 	values(#{imp_uid},#{merchant_uid}, #{biz_email}, #{pay_date}, #{amount}, #{card_no}, #{refund})
</insert>

<!-- 이용권 결제내역 조회 -->
<select id="recentlyPay" parameterType="String" resultType="Payed_listVO">
	select imp_uid, merchant_uid, biz_email, pay_date, amount, card_no, refund from 
	(select rownum, imp_uid, merchant_uid, biz_email, pay_date, amount, card_no, refund from 
	(select * from payed_list where biz_email = #{biz_email})where refund ='payed' order by pay_date)
	where rownum = 1
</select>

<!-- 이용권 결제 사업자에 반영 -->
<update id="updateBiz_pay" parameterType="Biz_MemberVO">
	update biz_member set pay_coupon = #{pay_coupon} where biz_email = #{biz_email}
</update>

<!-- 이용권 환불 사업자에 반영 -->
<update id="updateBiz_refund" parameterType="Biz_MemberVO">
	update biz_member set pay_coupon = #{pay_coupon} where biz_email = #{biz_email}
</update>

<!-- 이용권 결제내역 환불 -->
<update id="refund_pay" parameterType="String">
	update payed_list set refund = 'refund' where merchant_uid = #{merchant_uid}
</update>

<!-- 어드민 회원 조회 -->
<!-- 분류 / 아이디 / 닉네임 / 지역 / 가입일 / 신고횟수   -->
<select id="serach_member" parameterType="Search_paramsVO" resultType="MemberVO">
	select grade, email, nick, local, signdate, wcount from member_list 
	where 1 = 1
		<if test ="fromDate != null and fromDate != '' and toDate != null and toDate !=''">
			and signdate between TO_DATE(#{fromDate},'YYYYMMDD') and TO_DATE(#{toDate},'YYYYMMDD')+0.9999
		</if>
		<if test = "(member_grade != null and member_grade != '') or (member_grade1 != null and member_grade1 !='' )or (member_grade2 != null and member_grade2 !='' )or (member_grade3 != null and member_grade3 !='')">
			AND grade in(#{member_grade}, #{member_grade1}, #{member_grade2}, #{member_grade3})
		</if>
		<if test = "keyword != null and keyword != ''">
			 AND email like '%' || #{keyword} || '%' or nick like '%' || #{keyword} || '%'
		</if>
	 
</select>

<!-- 어드민 사업자인증 완료 -->
<update id="auth_confirm" parameterType="String">
	update biz_member set status = 0 where biz_email = #{email}
</update>

<update id ="update_confirm" parameterType="String">
	update member_list set grade = '사업자' where email = #{email}
</update>

<!-- 어드민 사업자인증 반려 -->
<delete id="auth_return" parameterType="String">
	DELETE FROM biz_member WHERE biz_email = #{email}
</delete>

<!-- 어드민 이용권 결제내역 조회 -->
<select id="getPay_list" resultType = "Payed_listVO">
	select merchant_uid, biz_email, refund, pay_date from payed_list order by pay_date
</select>

<!-- 투두리스트 추가 -->
<insert id ="insert_todo" parameterType="Todo_listVO">
 	insert into todo_list (to_do_no, to_do)
 	values(todo_SEQ.nextval, #{to_do})
</insert>

<!-- 투두리스트 DONE  -->
<update id="update_todo" parameterType="Todo_listVO">
	update todo_list set status = 'Done' where to_do = #{to_do}
</update>

<!-- 투두리스트 삭제 -->
<delete id="delete_todo" parameterType="Todo_listVO">
	DELETE FROM todo_list WHERE to_do = #{to_do}
</delete>

<!-- 투두리스트 조회 -->
<select id="select_todo" resultType = "Todo_listVO">
	select to_do, status from todo_list order by to_do_no
</select>
</mapper>